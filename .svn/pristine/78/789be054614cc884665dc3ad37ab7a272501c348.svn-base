<template>
  <div class="minirefresh-wrap minirefresh-theme-default" :style="{top:marginTop}">
    <div class="minirefresh-downwrap minirefresh-hardware-speedup" v-show='showRefresh'>
      <div class="downwrap-content">
        <p class="downwrap-progress" :class="{'minirefresh-rotate':isLoading}"></p>
        <p class="downwrap-tips">{{refreshTxt}}</p>
      </div>
    </div>
    <div class='minirefresh-scroll minirefresh-hardware-speedup'>
      <slot></slot>
      <div class="minirefresh-upwrap">
        <p class="downwrap-progress" :class="{'minirefresh-rotate':isLoadingMore}"></p>
        <p class="downwrap-tips">{{loadMoereTxt}}</p>
      </div>
    </div>
  </div>
</template>
<script>
export default {
  props: {
    contentdown: {
      type: String,
      default: '下拉刷新'
    },
    contentover: {
      type: String,
      default: '释放刷新'
    },
    contentrefresh: {
      type: String,
      default: '加载中...'
    },
    contentsuccess: {
      type: String,
      default: '刷新成功'
    },
    contenterror: {
      type: String,
      default: '刷新失败'
    },
    contentUp: {
      type: String,
      default: '上拉显示更多'
    },
    contentnomore: {
      type: String,
      default: '没有更多数据了'
    },
    marginTop: {
      type: String,
      default: '0px'
    }
  },
  data() {
    return {
      isLoadingMore: false,
      showRefresh: false,
      startTop: 0,
      startY: 0,
      moveY: 0,
      startX: 0,
      downOffset: 50,
      downHight: 0,
      bounceTime: 300,
      refreshTxt: '',
      loadMoereTxt: '',
      scrollArea: null,
      progress: null,
      isLoading: false,

    }
  },
  methods: {
    init() {
      this.scrollArea = this.$el.querySelector('.minirefresh-scroll');
      this.progress = this.$el.querySelector('.downwrap-progress');
      this.bindEvent();
    },
    bindEvent() {
      this.scrollArea.addEventListener('touchstart', this.handleTouchStart);
      this.scrollArea.addEventListener('touchmove', this.handleTouchMove);
      this.scrollArea.addEventListener('touchend', this.handleTouchEnd);
      this.scrollArea.addEventListener('scroll', this.handleScroll);
    },
    handleScroll(e) {
      let scrollTop = this.scrollArea.scrollTop;
      let clientHeight = this.scrollArea.clientHeight;
      let scrollHeight = this.scrollArea.scrollHeight;
      if (scrollHeight - clientHeight - scrollTop < 30 && !this.isLoadingMore) {
        this.triggerLoadMore();
      }
    },
    triggerLoadMore() {
      console.log(11)
      this.isLoadingMore = true;
      this.loadMoereTxt = this.contentrefresh;
      this.$emit('load-more');   
    },
    endLoadMore(){
    this.isLoadingMore = false;
    },
    handleTouchStart(e) {
      if (this.cantRefresh) {
        e.preventDefault();
      }
      // 记录startTop, 并且只有startTop存在值时才允许move
      this.startTop = this.$el.scrollTop;

      // startY用来计算距离
      this.startY = e.touches ? e.touches[0].pageY : e.clientY;
      // X的作用是用来计算方向，如果是横向，则不进行动画处理，避免误操作
      this.startX = e.touches ? e.touches[0].pageX : e.clientX;
    },
    handleTouchMove(e) {
      // 当前第一个手指距离列表顶部的距离
      var curY = e.touches ? e.touches[0].pageY : e.clientY;
      var curX = e.touches ? e.touches[0].pageX : e.clientX;

      // 和起点比,移动的距离,大于0向下拉
      var moveY = curY - this.startY;
      var moveX = curX - this.startX;

      if (moveY > 0) {
        this.showRefresh = true;
        this.refreshTxt = this.contentdown;
        this.downHight = Math.min(this.downOffset, moveY);
        this.translate(this.downHight);
        this.rotate(this.downHight);
      }
    },
    handleTouchEnd(e) {
      let self = this;
      this.startY = 0;
      this.startX = 0;
      this.startTop = 0;
      if (this.downHight == this.downOffset) {
        this.isLoading = true;
        this.refreshTxt = this.contentrefresh;
        self.$emit('refresh');
        setTimeout(function() {
          self.isLoading = false;
          self.showRefresh = false;
          self.translate(0, self.bounceTime);
        }, 700)
      }

    },
    translate(distance, duration) {
      distance = distance || 0;
      duration = duration || 0;
      this.moveY = distance;
      if (this.downHight == this.downOffset) {
        this.refreshTxt = this.contentover;
      }

      this.scrollArea.style.webkitTransitionDuration = duration + 'ms';
      this.scrollArea.style.transitionDuration = duration + 'ms';
      this.scrollArea.style.webkitTransform = 'translate(0px, ' + distance + 'px) translateZ(0px)';
      this.scrollArea.style.transform = 'translate(0px, ' + distance + 'px) translateZ(0px)';
    },
    rotate(distance) {
      var progress = 360 * (distance / this.downOffset) - 206;
      this.progress.style.webkitTransform = 'rotate(' + progress + 'deg)';
      this.progress.style.transform = 'rotate(' + progress + 'deg)';
    }
  },
  mounted() {
    this.init();
  }
}
</script>
<style lang='less' scoped>
.minirefresh-wrap {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  overflow-x: hidden;
  overflow-y: hidden;
  z-index: 1;
  .minirefresh-hardware-speedup {
    transform: translateZ(0);
  }
  .minirefresh-downwrap,
  .minirefresh-hardware-speedup {
    position: absolute;
    left: 0;
    width: 100%;
    height: 75px;
    .downwrap-content {
      position: absolute;
      width: 100%;
      padding: 10px 0;
      text-align: center;
    }
    .minirefresh-rotate {
      animation: minirefresh-rotate 0.6s linear infinite;
    }
    .downwrap-progress {
      display: inline-block;
      width: 16px;
      height: 16px;
      border-radius: 50%;
      border: 1px solid gray;
      margin-right: 8px;
      border-bottom-color: transparent;
      vertical-align: middle;
      transform: rotate(206.5deg)
    }
    .downwrap-tips {
      display: inline-block;
      font-size: 12px;
      color: gray;
      vertical-align: middle;
    }
  }
  .minirefresh-scroll {
    position: absolute;
    top: 0;
    bottom: 0;
    width: 100%;
    -webkit-overflow-scrolling: touch;
    overflow-y: auto;
    z-index: 1;
    height: 100%;
    .minirefresh-upwrap {
      min-height: 30px;
      padding: 10px 0;
      text-align: center;
    }
  }
}

@keyframes minirefresh-rotate {
  0% {
    -webkit-transform: rotateZ(0deg);
    transform: rotateZ(0deg);
    -moz-transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotateZ(360deg);
    transform: rotateZ(360deg);
    -moz-transform: rotate(360deg);
  }
}

@-webkit-keyframes minirefresh-rotate {
  0% {
    -webkit-transform: rotateZ(0deg);
    transform: rotateZ(0deg);
    -moz-transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotateZ(360deg);
    transform: rotateZ(360deg);
    -moz-transform: rotate(360deg);
  }
}
</style>
